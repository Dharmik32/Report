FLO Data Emp.js

const Employee = [
    {
        Id: "1",
        FirstName: "Dharmik",
        LastName: "Chavda",
        Gender: "Male",
        Email: "dharmik@gmail",
        Phone: "9328772432",
        Department: "PHP",
        Skills: "Backend Technology",
        About: "Hello"
    },
    {
        Id: "2",
        FirstName: "Jay",
        LastName: "Patel",
        Gender: "Male",
        Email: "jaypatel@gmail",
        Phone: "9324568957",
        Department: ".NET",
        Skills: "Backend Technology",
        About: "Hello"
    }
]

export {Employee};


page/dashboard
Add
import React, { useState, useEffect } from "react";
import Swal from 'sweetalert2';

function Add({ employees, setEmployee, setIsAdding }) {
    const [FirstName, setFirstName] = useState('');
    const [LastName, setLastName] = useState('');
    const [Email, setEmail] = useState('');
    const [Phone, setPhone] = useState('');
    const [Gender, setGender] = useState('');
    const [Department, setDepartment] = useState('');
    const [Skills, setSkills] = useState('');
    const [About, setAbouts] = useState('');


    useEffect(() => {
    }, [])


    const getSkills = (e) => {
        const {value, checked} = e.target
        if (checked) {
            setSkills([...Skills, value])          

        }

        else {
            setSkills(Skills.filter((e) => e !== value))
        }

    }


    const handleAdd = e => {       

        if (!FirstName || !LastName || !Email || !Department) {
            return Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'All fields are required.',
                showConfirmButton: true
            });
        }


        const id = employees.length + 1;
        const newEmployee = {
            Id,
            FirstName,
            LastName,
            Email,
            Phone,
            Gender,
            Department,
            Skills,
            About
        } 

        const tempemployee = employees;
        tempemployee.push(newEmployee);
        setEmployee(tempemployee);
        setIsAdding(false);
      

        Swal.fire({
            icon: 'success',
            title: 'Added!',
            text: `${FirstName} ${LastName}'s data has been Added.`,
            showConfirmButton: false,
            timer: 1500
        });
    }

return (
        <div>
            <form onSubmit={handleAdd}>
                <h1>Add Employee</h1>
                <br></br>
                <div>
                    <label htmlFor="firstname">First Name: </label>
                    <input
                        id="firstname"
                        type="text"
                        name="firstname"
                        value={FirstName}
                        onChange={(e) => { setFirstName(e.target.value) }}
                    />
                </div>
                <br></br>
                <div>
                    <label htmlFor="lastname">Last Name: </label>
                    <input
                        id="lastname"
                        type="text"
                        name="lastname"
                        value={LastName}
                        onChange={(e) => { setLastName(e.target.value) }}
                    />
                </div>
                <br></br>
                <div><label htmlFor="email">Email: </label>
                    <input
                        id="email"
                        type="email"
                        name="email"
                        value={Email}
                        onChange={(e) => { setEmail(e.target.value) }}
                    /></div>
                <br></br>
                <div><label htmlFor="phone">Phone: </label>
                    <input
                        id="phone"
                        type="text"
                        name="phone"
                        value={Phone}
                        onChange={(e) => { setPhone(e.target.value) }}
                    /></div>
                <br></br>
                <div>
                    <label htmlFor="gender">Gender: </label>&nbsp;
                    <input
                        id="male"
                        type="radio"
                        name="gender"
                        value="male"
                        onChange={(e) => { setGender(e.target.value) }}
                    />

                    <label htmlFor="male" className='px-2'>Male</label>
                    &nbsp;
                    <input
                        id="female"
                        type="radio"
                        name="gender"
                        value="female"

                        onChange={(e) => {setGender(e.target.value)}}
                    />

                    <label htmlFor="female" className='px-2'>Female</label>

                </div>
                <br></br>
                <div> <label htmlFor="department">Department: </label>
                    <select
                        id="department"
                        type="text"
                        name="department"
                        value={Department}
                        onChange={(e) => { setDepartment(e.target.value) }} >                       

                        <option value="PHP">PHP</option>
                        <option value=".NET">.Net</option>
                        <option value="SEO">SEO</option>
                        <option value="Mobile">Mobile</option>
                        <option value="Admin/HR">Admin/HR</option>
                        <option value="Account">Account</option>

                    </select>
                </div>
                <br></br>
                <div>
                    <label htmlFor="skills">Skills: </label> &nbsp;

                    <input id="skills" type="checkbox" name="Programming" value="Programming" onChange={ getSkills} />

                    <label htmlFor="Programming">Programming</label>  &nbsp;

                    <input id="skills" type="checkbox" name="Communication" value="Communication" onChange={ getSkills} />

                    <label htmlFor="Communication">Communication</label> &nbsp;

                    <input id="skills" type="checkbox" name="ProCommunication" value="ProCommunication" onChange={ getSkills} />

                    <label htmlFor="ProCommunication">ProCommunication</label> &nbsp;

                    <input id="skills" type="checkbox" name="Finance" value="Finance" onChange={ getSkills} />

                    <label htmlFor="Finance">Finance</label> &nbsp;

                    <input id="skills" type="checkbox" name="Recruitment" value="Recruitment" onChange={ getSkills} />

                    <label htmlFor="Recruitment">Recruitment</label> &nbsp;

                </div>

                <br></br>

                <div>
                    <label htmlFor="about">About: </label>
                    <input
                        id="about"
                        type="text"
                        name="about"
                        value={About}
                        onChange={(e) => { setAbouts(e.target.value) }}
                    />
                </div>


                <div style={{ marginTop: '30px' }}>
                    <input type="button" className="btn btn-primary" value="Add" onClick={() => handleAdd()} />
                    <input
                        style={{ marginLeft: '12px' }}
                        className="btn btn-danger"
                        type="button"
                        value="Cancel"
                        onClick={() => setIsAdding(false)}
                    />
                </div>
            </form>

        </div>
    )
}

export default Add;



Edit
import React, { useState } from 'react'
import Swal from 'sweetalert2';



function Edit({ employees, selectedEmployee, setEmployee, setIsEditing }) {



    const id = selectedEmployee.Id;



    const [FirstName, setFirstName] = useState(selectedEmployee.FirstName);
    const [LastName, setLastName] = useState(selectedEmployee.LastName);
    const [Email, setEmail] = useState(selectedEmployee.Email);
    const [Phone, setPhone] = useState(selectedEmployee.phone);
    const [Gender, setGender] = useState(selectedEmployee.Gender);
    const [Department, setDepartment] = useState(selectedEmployee.Department);
    const [Skills, setSkills] = useState(selectedEmployee.Skills);
    const [About, setAbout] = useState(selectedEmployee.about);


    const handleUpdate = e => {
        e.preventDefault();



        if (!FirstName || !LastName || !Email) {
            return Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'All fields are required.',
                showConfirmButton: true
            });
        }



        const employee = {
            Id,
            FirstName,
            LastName,
            Email,
            Phone,
            Gender,
            Department,
            Skills,
            About
        };



        for (let i = 0; i < employees.length; i++) {
            if (employees[i].id === id) {
                employees.splice(i, 1, employee);
                break;
            }
        }



        setEmployee(employees);
        setIsEditing(false);



        Swal.fire({
            icon: 'success',
            title: 'Updated!',
            text: `${employee.FirstName} ${employee.LastName}'s data has been updated.`,
            showConfirmButton: false,
            timer: 1500
        });
    };



    return (
        <div className="small-container">
            <form onSubmit={handleUpdate}>
                <h1>Edit Employee</h1>
                <label htmlFor="firstName">First Name</label>
                <input
                    id="firstName"
                    type="text"
                    name="firstName"
                    value={FirstName}
                    onChange={(e) => {setFirstName(e.target.value)}}
                />
                <label htmlFor="lastName">Last Name</label>
                <input
                    id="lastName"
                    type="text"
                    name="lastName"
                    value={LastName}
                    onChange={(e) => setLastName(e.target.value)}
                />
                <label htmlFor="email">Email</label>
                <input
                    id="email"
                    type="email"
                    name="email"
                    value={Email}
                    onChange={(e) => setEmail(e.target.value)}
                />
                <label htmlFor="phone">phone:</label>
                <input
                    id="phone"
                    type="text"
                    name="phone"
                    value={Phone}
                    onChange={(e) => setPhone(e.target.value)}
                />
                <label htmlFor="gender">Gender:</label>
                <input
                    id="male"
                    type="radio"
                    name="gender"
                    value={Gender}
                    onChange={(e) => setGender(e.target.value)}
                />
                <label htmlFor="department">Department:</label>
                <input
                    id="department"
                    type="dropdown"
                    name="department"
                    value={Department}
                    onChange={(e) => setDepartment(e.target.value)}
                />
                <label htmlFor="skills">Skills:</label>
                <input
                    id="skills"
                    type="text"
                    name="skills"
                    value={Skills}
                    onChange={(e) => setSkills(e.target.value)}
                />
                <label htmlFor="about">About:</label>
                <input
                    id="about"
                    type="text"
                    name="about"
                    value={About}
                    onChange={(e) => setAbout(e.target.value)}
                />
                <div style={{ marginTop: '30px' }}>
                    <input type="submit" value="Update" />
                    <input
                        style={{ marginLeft: '12px' }}
                        className="muted-button"
                        type="button"
                        value="Cancel"
                        onClick={() => setIsEditing(false)}
                    />
                </div>
            </form>
        </div>
    );
}



export default Edit



header
import React from 'react'

function Header({ setIsAdding }) {
    return (
        <header>
            <h1>CRUD Application</h1>
            <div style={{ marginTop: '30px', marginBottom: '18px' }}>
                <button onClick={() => setIsAdding(true)} className='round-button'>Add Button</button>
            </div>
        </header>
    )
}

export default Header;


index
import React, { useState } from 'react'
import Swal from 'sweetalert2';

import Header from './Header';
import Lists from './Lists';
import Add from './Add';
import Edit from './Edit';

import { Employee } from '../../Data/Emp';

function Dashboard() {

    const [employees, setEmployee] = useState(Employee);
    const [selectedEmployee, setSelectedEmployee] = useState(null);
    const [isAdding, setIsAdding] = useState(false);
    const [isEditing, setIsEditing] = useState(false);

    const handleEdit = (id) => {
        const [employee] = employees.filter(employee => employee.Id === id);

        setSelectedEmployee(employee);
        setIsEditing(true);
    }

    const handleDelete = (id) => {
        Swal.fire({
            icon: 'warning',
            title: 'Are you sure?',
            text: "You won't able to revert this!",
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
        }).then(result => {
            if (result.value) {
                const [employee] = employees.filter(employee => employee.Id === id);

                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: `${employee.FirstName} ${employee.LastName}'s data has been deleted.`,
                    showConfirmButton: false,
                    timer: 1500,
                });

                setEmployee(employees.filter(employee => employee.Id !== id));
            }
        });
    }


    return (
        <div className='contaimer'>
            {/* list */}
            {!isAdding && !isEditing && (
                <>
                    <Header setIsAdding={setIsAdding} />
                        
                    <Lists employees={employees}
                        handleEdit={handleEdit}
                        handleDelete={handleDelete}/>
                    
                    
                </>
            )}
            {/* Add */}
            {isAdding && (
                <Add employees={employees}
                setEmployee={setEmployee}
                setIsAdding={setIsAdding} />
                    
            )}
            {/* Edit */}
            {isEditing && (
                <Edit employees={employees}
                selectedEmployee={selectedEmployee}
                setEmployee={setEmployee}
                setIsEditing={setIsEditing} />
            )}
        </div>
    )
}

export default Dashboard;


LISts
import React, { useMemo,useEffect } from "react";

function Lists({ employees, handleEdit, handleDelete }) {
   useEffect(()=>{
    console.log(employees)
   },[])
    return (
        <div className="container">
            <table class="striped-table" className="table table-bordered">
                <thead>
                    <tr >
                        <th>No.</th>
                        <th>FirstName</th>
                        <th>LastName</th>
                        <th>Email</th>
                        <th>Gender</th>
                        <th>Department</th>
                        <th>Skills</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                {employees ? (
                        employees.map((employee, i) => (
                            <tr key={employee.id}>
                                <td>{i + 1}</td>
                                <td>{employee.FirstName}</td>
                                <td>{employee.LastName}</td>
                                <td>{employee.Email}</td>
                                <td>{employee.Gender}</td>
                                <td>{employee.Department}</td>
                                <td>{employee.Skills} </td>
                                <td className="text-right">
                                    <button
                                      onClick={() => handleEdit(employee.Id)}
                                        className="btn btn-primary">
                                        Edit
                                    </button>
                                &nbsp;
                                    <button
                                        onClick={() => handleDelete(employee.Id)}
                                        className="btn btn-danger">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan={7}>No records available</td>
                        </tr>
                    )}
                    </tbody>
            </table>   
        </div>
    )
}

export default Lists;



App.js
import logo from './logo.svg';
import './App.css';
import Dashboard from './Page/Dashboard';

function App(){
  return (
    <div>
      <Dashboard />

    </div>
  )
}

export default App;



index.jss
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);




// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
